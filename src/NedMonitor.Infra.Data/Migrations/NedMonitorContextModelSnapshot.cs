// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NedMonitor.Infra.Data;

#nullable disable

namespace NedMonitor.Infra.Data.Migrations
{
    [DbContext(typeof(NedMonitorContext))]
    partial class NedMonitorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DbQueryEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrelationId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("datetime2");

                    b.Property<string>("DbContext")
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<double>("DurationMs")
                        .HasColumnType("float");

                    b.Property<string>("ExceptionMessage")
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<DateTime>("ExecutedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ORM")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Sql")
                        .IsRequired()
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("LogId");

                    b.ToTable("DbQueryEntries", (string)null);
                });

            modelBuilder.Entity("NedMonitor.Domain.Entities.ApplicationLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrelationId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndpointPath")
                        .IsRequired()
                        .HasMaxLength(9000)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ErrorCategory")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(150)");

                    b.Property<int>("LogAttentionLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalMilliseconds")
                        .HasColumnType("float");

                    b.Property<string>("TraceIdentifier")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CorrelationId");

                    b.HasIndex("EndpointPath");

                    b.HasIndex("ErrorCategory");

                    b.ToTable("ApplicationLogs", (string)null);
                });

            modelBuilder.Entity("NedMonitor.Domain.Entities.Exception", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrelationId")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("datetime2");

                    b.Property<string>("InnerException")
                        .HasColumnType("varchar(max)");

                    b.Property<Guid>("LogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Source")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("TimestampUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Tracer")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("LogId");

                    b.ToTable("Exceptions", (string)null);
                });

            modelBuilder.Entity("NedMonitor.Domain.Entities.HttpClientLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrelationId")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExceptionMessage")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ExceptionType")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("InnerException")
                        .HasColumnType("varchar(max)");

                    b.Property<Guid>("LogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequestBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestHeaders")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseHeaders")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("StartTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("UrlTemplate")
                        .HasMaxLength(2048)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("LogId");

                    b.ToTable("HttpClientLogs", (string)null);
                });

            modelBuilder.Entity("NedMonitor.Domain.Entities.LogEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrelationId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogCategory")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(150)");

                    b.Property<Guid>("LogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LogMessage")
                        .IsRequired()
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<int>("LogSeverity")
                        .HasColumnType("int");

                    b.Property<string>("MemberName")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("MemberType")
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SourceLineNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimestampUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LogId");

                    b.ToTable("LogEntries", (string)null);
                });

            modelBuilder.Entity("NedMonitor.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CorrelationId")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime?>("DateChanged")
                        .HasColumnType("datetime2");

                    b.Property<string>("Detail")
                        .HasColumnType("VARCHAR(MAX)");

                    b.Property<string>("Key")
                        .HasMaxLength(350)
                        .HasColumnType("varchar(150)");

                    b.Property<Guid>("LogId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LogLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("VARCHAR(MAX)");

                    b.HasKey("Id");

                    b.HasIndex("LogId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("DbQueryEntry", b =>
                {
                    b.HasOne("NedMonitor.Domain.Entities.ApplicationLog", "ApplicationLog")
                        .WithMany("DbQueryEntries")
                        .HasForeignKey("LogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationLog");
                });

            modelBuilder.Entity("NedMonitor.Domain.Entities.ApplicationLog", b =>
                {
                    b.OwnsOne("NedMonitor.Domain.Entities.Diagnostic", "Diagnostic", b1 =>
                        {
                            b1.Property<Guid>("ApplicationLogId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<bool>("CacheHit")
                                .HasColumnType("bit");

                            b1.Property<int>("DbQueryCount")
                                .HasColumnType("int");

                            b1.Property<string>("Dependencies")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("MemoryUsageMb")
                                .HasColumnType("float");

                            b1.HasKey("ApplicationLogId");

                            b1.ToTable("ApplicationLogs");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationLogId");
                        });

                    b.OwnsOne("NedMonitor.Domain.Entities.Environment", "Environment", b1 =>
                        {
                            b1.Property<Guid>("ApplicationLogId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ApplicationVersion")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("varchar(150)");

                            b1.Property<string>("EnvironmentName")
                                .IsRequired()
                                .HasMaxLength(250)
                                .HasColumnType("varchar(150)");

                            b1.Property<string>("MachineName")
                                .IsRequired()
                                .HasMaxLength(250)
                                .HasColumnType("varchar(150)");

                            b1.Property<int>("ThreadId")
                                .HasColumnType("int");

                            b1.HasKey("ApplicationLogId");

                            b1.HasIndex("MachineName");

                            b1.ToTable("ApplicationLogs");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationLogId");
                        });

                    b.OwnsOne("NedMonitor.Domain.Entities.Project", "Project", b1 =>
                        {
                            b1.Property<Guid>("ApplicationLogId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Id")
                                .HasMaxLength(200)
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("MinimumLogLevel")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("varchar(150)");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.HasKey("ApplicationLogId");

                            b1.HasIndex("Id");

                            b1.HasIndex("Name");

                            b1.HasIndex("Type");

                            b1.ToTable("ApplicationLogs");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationLogId");

                            b1.OwnsOne("NedMonitor.Domain.Entities.DataInterceptorsSetting", "DataInterceptors", b2 =>
                                {
                                    b2.Property<Guid>("ProjectApplicationLogId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Dapper")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("EF")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ProjectApplicationLogId");

                                    b2.ToTable("ApplicationLogs");

                                    b2.WithOwner()
                                        .HasForeignKey("ProjectApplicationLogId");
                                });

                            b1.OwnsOne("NedMonitor.Domain.Entities.ExceptionsSetting", "Exceptions", b2 =>
                                {
                                    b2.Property<Guid>("ProjectApplicationLogId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Expected")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ProjectApplicationLogId");

                                    b2.ToTable("ApplicationLogs");

                                    b2.WithOwner()
                                        .HasForeignKey("ProjectApplicationLogId");
                                });

                            b1.OwnsOne("NedMonitor.Domain.Entities.ExecutionModeSetting", "ExecutionMode", b2 =>
                                {
                                    b2.Property<Guid>("ProjectApplicationLogId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<bool>("EnableMonitorDbQueries")
                                        .HasColumnType("bit");

                                    b2.Property<bool>("EnableMonitorExceptions")
                                        .HasColumnType("bit");

                                    b2.Property<bool>("EnableMonitorHttpRequests")
                                        .HasColumnType("bit");

                                    b2.Property<bool>("EnableMonitorLogs")
                                        .HasColumnType("bit");

                                    b2.Property<bool>("EnableMonitorNotifications")
                                        .HasColumnType("bit");

                                    b2.Property<bool>("EnableNedMonitor")
                                        .HasColumnType("bit");

                                    b2.HasKey("ProjectApplicationLogId");

                                    b2.ToTable("ApplicationLogs");

                                    b2.WithOwner()
                                        .HasForeignKey("ProjectApplicationLogId");
                                });

                            b1.OwnsOne("NedMonitor.Domain.Entities.HttpLoggingSetting", "HttpLogging", b2 =>
                                {
                                    b2.Property<Guid>("ProjectApplicationLogId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<bool>("CaptureResponseBody")
                                        .HasColumnType("bit");

                                    b2.Property<int>("MaxResponseBodySizeInMb")
                                        .HasColumnType("int");

                                    b2.Property<bool>("WritePayloadToConsole")
                                        .HasColumnType("bit");

                                    b2.HasKey("ProjectApplicationLogId");

                                    b2.ToTable("ApplicationLogs");

                                    b2.WithOwner()
                                        .HasForeignKey("ProjectApplicationLogId");
                                });

                            b1.OwnsOne("NedMonitor.Domain.Entities.SensitiveDataMaskerSetting", "SensitiveDataMasking", b2 =>
                                {
                                    b2.Property<Guid>("ProjectApplicationLogId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<bool>("Enabled")
                                        .HasColumnType("bit");

                                    b2.Property<string>("MaskValue")
                                        .IsRequired()
                                        .HasColumnType("varchar(150)");

                                    b2.Property<string>("SensitiveKeys")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("ProjectApplicationLogId");

                                    b2.ToTable("ApplicationLogs");

                                    b2.WithOwner()
                                        .HasForeignKey("ProjectApplicationLogId");
                                });

                            b1.Navigation("DataInterceptors");

                            b1.Navigation("Exceptions");

                            b1.Navigation("ExecutionMode")
                                .IsRequired();

                            b1.Navigation("HttpLogging");

                            b1.Navigation("SensitiveDataMasking");
                        });

                    b.OwnsOne("NedMonitor.Domain.Entities.Request", "Request", b1 =>
                        {
                            b1.Property<Guid>("ApplicationLogId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Body")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("BodySize")
                                .HasColumnType("float");

                            b1.Property<string>("ClientId")
                                .IsRequired()
                                .HasMaxLength(250)
                                .HasColumnType("varchar(150)");

                            b1.Property<long?>("ContentLength")
                                .HasColumnType("bigint");

                            b1.Property<string>("ContentType")
                                .HasMaxLength(100)
                                .HasColumnType("varchar(150)");

                            b1.Property<string>("Headers")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("HttpMethod")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("varchar(150)");

                            b1.Property<string>("Id")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(150)");

                            b1.Property<string>("IpAddress")
                                .HasMaxLength(45)
                                .HasColumnType("varchar(150)");

                            b1.Property<bool>("IsAjaxRequest")
                                .HasColumnType("bit");

                            b1.Property<bool>("IsHttps")
                                .HasColumnType("bit");

                            b1.Property<string>("Protocol")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("varchar(150)");

                            b1.Property<string>("QueryString")
                                .IsRequired()
                                .HasMaxLength(1350)
                                .HasColumnType("varchar(150)");

                            b1.Property<string>("RequestUrl")
                                .IsRequired()
                                .HasMaxLength(1500)
                                .HasColumnType("varchar(150)");

                            b1.Property<string>("RouteValues")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Scheme")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("varchar(150)");

                            b1.HasKey("ApplicationLogId");

                            b1.HasIndex("ClientId");

                            b1.HasIndex("Id");

                            b1.ToTable("ApplicationLogs");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationLogId");

                            b1.OwnsOne("NedMonitor.Domain.Entities.UserPlatform", "UserPlatform", b2 =>
                                {
                                    b2.Property<Guid>("RequestApplicationLogId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("BrowserName")
                                        .IsRequired()
                                        .HasMaxLength(100)
                                        .HasColumnType("varchar(150)");

                                    b2.Property<string>("BrowserVersion")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("varchar(150)");

                                    b2.Property<string>("DeviceType")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("varchar(150)");

                                    b2.Property<string>("OSName")
                                        .IsRequired()
                                        .HasMaxLength(150)
                                        .HasColumnType("varchar(150)");

                                    b2.Property<string>("OSVersion")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("varchar(150)");

                                    b2.Property<string>("UserAgent")
                                        .IsRequired()
                                        .HasMaxLength(500)
                                        .HasColumnType("varchar(150)");

                                    b2.HasKey("RequestApplicationLogId");

                                    b2.ToTable("ApplicationLogs");

                                    b2.WithOwner()
                                        .HasForeignKey("RequestApplicationLogId");
                                });

                            b1.Navigation("UserPlatform")
                                .IsRequired();
                        });

                    b.OwnsOne("NedMonitor.Domain.Entities.Response", "Response", b1 =>
                        {
                            b1.Property<Guid>("ApplicationLogId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Body")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<long>("BodySize")
                                .HasColumnType("bigint");

                            b1.Property<string>("Headers")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ReasonPhrase")
                                .IsRequired()
                                .HasMaxLength(450)
                                .HasColumnType("varchar(150)");

                            b1.Property<int>("StatusCode")
                                .HasColumnType("int");

                            b1.HasKey("ApplicationLogId");

                            b1.ToTable("ApplicationLogs");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationLogId");
                        });

                    b.OwnsOne("NedMonitor.Domain.Entities.User", "User", b1 =>
                        {
                            b1.Property<Guid>("ApplicationLogId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Account")
                                .HasColumnType("varchar(150)");

                            b1.Property<string>("AccountCode")
                                .HasMaxLength(250)
                                .HasColumnType("varchar(150)");

                            b1.Property<string>("AuthenticationType")
                                .HasMaxLength(100)
                                .HasColumnType("varchar(150)");

                            b1.Property<string>("Claims")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Document")
                                .HasMaxLength(80)
                                .HasColumnType("varchar(150)");

                            b1.Property<string>("Email")
                                .HasMaxLength(320)
                                .HasColumnType("varchar(150)");

                            b1.Property<string>("Id")
                                .HasMaxLength(250)
                                .HasColumnType("varchar(150)");

                            b1.Property<bool>("IsAuthenticated")
                                .HasColumnType("bit");

                            b1.Property<string>("Name")
                                .HasMaxLength(450)
                                .HasColumnType("varchar(150)");

                            b1.Property<string>("Roles")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("TenantId")
                                .HasMaxLength(250)
                                .HasColumnType("varchar(150)");

                            b1.HasKey("ApplicationLogId");

                            b1.HasIndex("AccountCode");

                            b1.HasIndex("Document");

                            b1.HasIndex("Id");

                            b1.HasIndex("Name");

                            b1.ToTable("ApplicationLogs");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationLogId");
                        });

                    b.Navigation("Diagnostic")
                        .IsRequired();

                    b.Navigation("Environment")
                        .IsRequired();

                    b.Navigation("Project")
                        .IsRequired();

                    b.Navigation("Request")
                        .IsRequired();

                    b.Navigation("Response")
                        .IsRequired();

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("NedMonitor.Domain.Entities.Exception", b =>
                {
                    b.HasOne("NedMonitor.Domain.Entities.ApplicationLog", "ApplicationLog")
                        .WithMany("Exceptions")
                        .HasForeignKey("LogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationLog");
                });

            modelBuilder.Entity("NedMonitor.Domain.Entities.HttpClientLog", b =>
                {
                    b.HasOne("NedMonitor.Domain.Entities.ApplicationLog", "ApplicationLog")
                        .WithMany("HttpClientLogs")
                        .HasForeignKey("LogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationLog");
                });

            modelBuilder.Entity("NedMonitor.Domain.Entities.LogEntry", b =>
                {
                    b.HasOne("NedMonitor.Domain.Entities.ApplicationLog", "ApplicationLog")
                        .WithMany("LogEntries")
                        .HasForeignKey("LogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationLog");
                });

            modelBuilder.Entity("NedMonitor.Domain.Entities.Notification", b =>
                {
                    b.HasOne("NedMonitor.Domain.Entities.ApplicationLog", "ApplicationLog")
                        .WithMany("Notifications")
                        .HasForeignKey("LogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationLog");
                });

            modelBuilder.Entity("NedMonitor.Domain.Entities.ApplicationLog", b =>
                {
                    b.Navigation("DbQueryEntries");

                    b.Navigation("Exceptions");

                    b.Navigation("HttpClientLogs");

                    b.Navigation("LogEntries");

                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
